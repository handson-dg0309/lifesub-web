def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'node', image: 'node:20-slim', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:20.10.16-dind', ttyEnabled: true, privileged: true),
        containerTemplate(name: 'azure-cli', image: 'mcr.microsoft.com/azure-cli:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'envsubst', image: "mikefarah/yq:4.30.4", command: 'sleep', args: '1h'),
        containerTemplate(name: 'sonar-scanner', image: 'sonarsource/sonar-scanner-cli:latest', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/opt/sonar-scanner/.sonar/cache', memory: false),
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def manifest = "deploy.yaml"
        def namespace
        def sonarScannerHome = '/opt/sonar-scanner'

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage('Code Analysis & Quality Gate') {
            container('node') {
                sh "npm install"
                sh "npm test -- --coverage --passWithNoTests"
            }
            
            container('sonar-scanner') {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${sonarScannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=lifesub-web-dg0309 \
                        -Dsonar.projectName=lifesub-web-dg0309 \
                        -Dsonar.sources=src \
                        -Dsonar.tests=src \
                        -Dsonar.test.inclusions=src/**/*.test.js,src/**/*.test.jsx \
                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                    """
                }
            }
            
            timeout(time: 10, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group rg-digitalgarage-02 --name aks-digitalgarage-02 --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Build & Push Image') {
            container('docker') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    def imagePath = "${props.registry}/${props.image_org}/${props.root_project}:${imageTag}"
                    
                    sh """
                        echo "Logging into ACR ${props.registry}"
                        docker login ${props.registry} --username \$USERNAME --password \$PASSWORD

                        echo "Building image ${imagePath}"
                        docker build \
                            --build-arg PROJECT_FOLDER="." \
                            --build-arg BUILD_FOLDER="deployment/container" \
                            --build-arg EXPORT_PORT="${props.export_port}" \
                            -f deployment/container/Dockerfile-lifesub-web \
                            -t ${imagePath} .
                        
                        echo "Pushing image ${imagePath}"
                        docker push ${imagePath}
                    """
                }
            }
        }

        stage('Generate & Apply Manifest') {
            container('envsubst') {
                sh """
                    export namespace=${namespace}
                    export lifesub_web_image_path=${props.registry}/${props.image_org}/${props.root_project}:${imageTag}
                    export replicas=${props.replicas}
                    export root_project=${props.root_project}
                    export export_port=${props.export_port}
                    export resources_requests_cpu=${props.resources_requests_cpu}
                    export resources_requests_memory=${props.resources_requests_memory}
                    export resources_limits_cpu=${props.resources_limits_cpu}
                    export resources_limits_memory=${props.resources_limits_memory}
                    export ingress_host=${props.ingress_host}
                    
                    cat deployment/${manifest}.template | envsubst > deployment/${manifest}
                    echo "Generated Kubernetes manifest:"
                    cat deployment/${manifest}
                """
            }

            container('azure-cli') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh """
                        # Create image pull secret if it doesn't exist
                        kubectl create secret docker-registry acr-secret \
                            --docker-server=${props.registry} \
                            --docker-username=\$USERNAME \
                            --docker-password=\$PASSWORD \
                            --namespace=${namespace} \
                            --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Apply the deployment manifest
                        kubectl apply -f deployment/${manifest}
                        
                        echo "Waiting for deployment to be ready..."
                        kubectl -n ${namespace} wait --for=condition=available deployment/${props.root_project} --timeout=300s
                        
                        echo "Waiting for service external IP..."
                        while [[ -z \$(kubectl -n ${namespace} get svc ${props.root_project} -o jsonpath='{.status.loadBalancer.ingress[0].ip}') ]]; do
                            sleep 5
                        done
                        
                        echo "Service external IP: \$(kubectl -n ${namespace} get svc ${props.root_project} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
                    """
                }
            }
        }
    }
}